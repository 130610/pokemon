from numpy import sin, linspace, pi, argmax, delete
from scipy import fft, arange
from scipy.io import wavfile
from files import *

pokemonList = []
groupList = []

def findMaxFreqs(data, sampleRate, numFreqs=30):
	'''
	returns list of lists of index, frequency, and level for each of the most preset frequencies
	'''
	dataLength = len(data) # length of the signal
	dataTime = float(dataLength)/sampleRate
	k = arange(dataLength)
	freqArr = k/dataTime # two sides frequency range
	freqArr = freqArr[range(dataLength/2)] # one side frequency range
	spectrum = fft(data)/dataLength # fft computing and normalization
	spectrum =  spectrum[range(dataLength/2)]
	spectrum = abs(spectrum)
	spectrum[0] = 0

	topFreqs = []

	for i in range(numFreqs):
		topFreqs.append([argmax(spectrum), freqArr[argmax(spectrum)], spectrum[argmax(spectrum)]])
		spectrum[argmax(spectrum)] = 0
	return topFreqs

def condenseFreqs(data, percentDiff):
	'''
	takes the 2d list from findMaxFreqs, and condenses entries with similar frequencies into single
	entries. Returns the same format of 2d list, but shorter
	'''
	topFreqs = []
	topFreqs.append(data[0])

	for i in range(1,len(data)):
		for j in range(len(topFreqs)):
			if abs(topFreqs[j][1] - data[i][1]) < topFreqs[j][1] * percentDiff / 100:
				topFreqs[j][2] += data[i][2]
				break
		else:
			topFreqs.append(data[i])

	topFreqs.sort(key=lambda x: x[2], reverse=True)
	return topFreqs

def pokeCompare(poke1, poke2, percentDiff):
	return abs(poke1[1][0][1] - poke2[1][0][1]) < ((poke1[1][0][1] + poke2[1][0][1]) / 2) * percentDiff / 100

def pokeCompare2(poke1, poke2, percentDiff):
	ratio1 = poke1[1][0][1] / poke1[1][1][1]
	ratio2 = poke2[1][0][1] / poke2[1][1][1]
	return abs(ratio1 - ratio2) < ((ratio1 + ratio2) / 2) * percentDiff / 100

def populatePokemonList():
	'''
	populates the global variable 'pokemonList'
	'''
	for f in filelist:
		y = wavfile.read(f)
		pokemonList.append([f,condenseFreqs(findMaxFreqs(y[1], y[0], 100), 5)[:3],"unused"])

def populateGroupList():
	'''
	populates the global variable 'groupList' using 'pokemonList'
	'''
	i = 0
	pokecounter = 0
	for p in pokemonList:
		if p[2] == "unused":
			groupList.append([p])
			pokemonList[pokemonList.index(p)][2] = "used"
			pokecounter += 1
			for q in pokemonList:
				if q[2] == "unused" and pokeCompare(p,q,5):
					groupList[i].append(q)
					pokemonList[pokemonList.index(q)][2] = "used"
					pokecounter += 1
			i += 1


def showGroups():
	for i in range(len(groupList)):
		print "group for i = ", i, " -------------------"
		for j in range(len(groupList[i])):
			print groupList[i][j][0], ": ", groupList[i][j][1][0][1]


populatePokemonList()
populateGroupList()
showGroups()
